// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Email {
  id        Int       @id @default(autoincrement())
  User      User      @relation(name: "EmailToUser", fields: [userId], references: [id])
  userId    String
  createdAt DateTime
  type      TypeEmail @default(Cadastro)
  send      Boolean   @default(false)

  @@map("emails")
}

model User {
  id           String    @id @default(uuid())
  emails       Email[]   @relation(name: "EmailToUser")
  keys         Key[]     @relation(name: "KeyToUser")
  tokens       Token[]   @relation(name: "TokenToUser")
  email        String    @unique
  password     String?
  socialId     String?   @unique
  provider     String?
  nome         String?
  sobreNome    String?
  cpf          String?   @unique
  termos       Boolean?  @default(false)
  validateUser Boolean?  @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime?

  @@map("users")
}

model Key {
  id        Int      @id @default(autoincrement())
  User      User     @relation(name: "KeyToUser", fields: [userId], references: [id])
  userId    String
  value     String   @unique
  validate  DateTime
  expiresIn Int
  status    Boolean  @default(true)
  type      TypeKey  @default(Cadastro)

  @@map("keys")
}

model Token {
  id           Int      @id @default(autoincrement())
  User         User     @relation(name: "TokenToUser", fields: [userId], references: [id])
  userId       String
  token        String
  refreshToken String
  expiresIn    Int
  validate     DateTime

  @@map("tokens")
}

enum TypeEmail {
  Cadastro
  RecuperarSenha
  ReseteSenha
}

enum TypeKey {
  Cadastro
  RecuperarSenha
  ResendEmailConfirmar
}
